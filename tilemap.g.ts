// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile0 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile3 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile4 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile5 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile6 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile7 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level":
            case "level":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . 2 . . . . 2 . . . . . . . . . . . . . . . . . 2 
. . . . 2 . . . 2 . . . . 2 . . . . 2 . . . . . . 2 . . . . . 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile1,myTiles.tile4,myTiles.tile5,myTiles.tile6,sprites.dungeon.hazardHole,sprites.dungeon.darkGroundCenter,sprites.dungeon.darkGroundNorth], TileScale.Sixteen);
            case "level_0":
            case "level_0":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . 2 . 2 . . . . . . . . . . 
. . . . . . . 2 2 . 2 . . . . . . 2 . 2 . 2 . . . . . . . . . . 
. . . . . . 2 2 2 . 2 . . . . 2 . 2 . 2 . 2 . . . . . . . . . . 
2 . . . . 2 2 2 2 . 2 . . 2 . . . . . . . 2 . . . . . . . . . . 
2 . . . . . . . . . 2 . . 2 . . . . . . . 2 . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 2 . . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile1,myTiles.tile4,myTiles.tile5,myTiles.tile6,sprites.dungeon.hazardHole,sprites.dungeon.floorLight0,sprites.dungeon.floorLight1,sprites.dungeon.floorLight5,sprites.dungeon.floorLight4], TileScale.Sixteen);
            case "level_1":
            case "level_1":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 2 2 2 2 2 2 . . . . . . . . . . . . . . . . 
. . . . . . . . 2 . 2 . . . . . . . . . . . . . . . . . . . . . 
. . . . . 2 . . 2 . 2 . . . . . . . . . . . . . . . . . . . . . 
. . . 2 . 2 . . . . 2 . . . . . . . . . . . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile5,myTiles.tile6,myTiles.tile1,myTiles.tile7,sprites.dungeon.floorDark3,sprites.dungeon.floorDarkDiamond,sprites.dungeon.floorDark1,sprites.dungeon.hazardHole,sprites.dungeon.floorDark2], TileScale.Sixteen);
            case "level_3":
            case "level_3":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . 2 2 2 2 . 2 . . . . . . . . . 
. . . . . . . . . . . . . . . . 2 . . . . . 2 . . . . . . . . . 
. . . 2 . . . . . . 2 . . . . . 2 . . . . . 2 . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile1,myTiles.tile4,myTiles.tile5,myTiles.tile6,myTiles.tile7,sprites.dungeon.hazardHole,sprites.dungeon.floorLight1,sprites.dungeon.floorLight0], TileScale.Sixteen);
            case "level_4":
            case "level_4":return tiles.createTilemap(hex`200008000005050000000000000000000000000000000000050500000000000000000000000000000000000000000000030300000000000000000000000000000000000000000000000000000000000003070000000000000000000000000000000000000000000000000000000300000d0a0000000000000000030303030000000000000000000000030003000d0d0000030300000d0d0b0b0000000000000000000007070000000007000700030303000000030700000000000000000000000000000c0c040007000c030c02000702000000070a00020000020000020000000001000c0906060906090609060609060606060909060606060606060606060606060608`, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . 2 2 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . 2 2 . . . . . . 2 2 2 2 . . . . . . . . . . 2 
2 . . . . 2 . 2 . . . . . . . . 2 . . . . . . . . . . . . . . 2 
2 . . 2 . 2 . 2 . . 2 . . . . 2 2 . . . . . . . . . . . . . . 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile1,myTiles.tile4,myTiles.tile5,myTiles.tile6,myTiles.tile7,sprites.dungeon.hazardHole,sprites.dungeon.doorOpenNorth,sprites.dungeon.doorClosedSouth,sprites.dungeon.doorOpenSouth,sprites.dungeon.doorOpenEast,sprites.dungeon.doorClosedEast,sprites.dungeon.doorClosedNorth,sprites.dungeon.doorClosedWest], TileScale.Sixteen);
            case "level_5":
            case "level_5":return tiles.createTilemap(hex``, img`
...................................2...
..2222222222222222222222222222222..2...
...................................2...
.........2.........................2...
.....2222222222222222222222222222222...
2......................................
2......................................
222222222222222222222222222222222222222
`, [myTiles.tile0,myTiles.tile1,myTiles.tile4,myTiles.tile6,myTiles.tile5,sprites.dungeon.purpleOuterSouth1,sprites.dungeon.hazardHole], TileScale.Sixteen);
            case "level_6":
            case "level_6":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . 2 2 . . . . . . . . . . . . . . . . . 
. . . . . . 2 2 . . . . . 2 2 2 . . 2 2 . . . . . . 2 2 2 2 2 2 2 . . . . 
. . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile1,myTiles.tile6,myTiles.tile5,myTiles.tile4,myTiles.tile7,sprites.dungeon.hazardHole,sprites.dungeon.purpleOuterSouth1], TileScale.Sixteen);
            case "level_2":
            case "level_2":return tiles.createTilemap(hex`2000080000000000000000000000000500000004000000040000040004000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000700000007000000000000000000000000000000000000000000000000000800070b00000000000000000000000000000000000000000000000000000605070807050507070907050505070907070507070907050505050900000000050000020000020002000002000200000200020000000200000002000000030606000000010001000000010000000000010000000100000001000000090a0a0a070a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a09`, img`
. . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . 
. . . . . . . 2 . . . 2 . . . . . . . . . . . . . . . . . . . . 
. . . . . 2 . 2 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 . 
. . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . 2 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.tile0,myTiles.tile4,myTiles.tile5,myTiles.tile6,myTiles.tile7,sprites.dungeon.floorMixed,sprites.dungeon.floorDark3,sprites.dungeon.floorDark1,sprites.dungeon.floorDark2,sprites.dungeon.floorLight3,sprites.dungeon.hazardHole,myTiles.tile1], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "tile0":return tile0;
            case "tile1":return tile1;
            case "tile2":return tile2;
            case "tile3":return tile3;
            case "tile4":return tile4;
            case "tile5":return tile5;
            case "tile6":return tile6;
            case "tile7":return tile7;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
